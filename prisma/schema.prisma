generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  role              String?     // 'district' or 'consultant'
  tier              String?     // 'trial' or 'premium'
  organizationName  String?
  onboardingComplete Boolean    @default(false)
  emailConnected    Boolean     @default(false)
  createdAt         DateTime    @default(now())
  trialEndsAt       DateTime?
  accounts          Account[]
  sessions          Session[]
  // For consultants - the districts they manage
  consultantDistricts District[]  @relation("ConsultantToDistrict")
  // For district reps - their district
  district          District?   @relation("UserToDistrict")
  // Email connection
  emailConnection   EmailConnection?
  // Imported emails
  emails            Email[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model District {
  id           String    @id @default(cuid())
  name         String
  contactEmail String
  contactName  String?
  // The district representative
  user         User      @relation("UserToDistrict", fields: [userId], references: [id])
  userId       String    @unique
  // The consultant managing this district
  consultant   User?     @relation("ConsultantToDistrict", fields: [consultantId], references: [id])
  consultantId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // Drive files
  files        File[]    @relation("DistrictToFile")
}

model File {
  id            String   @id @default(cuid())
  name          String
  googleDriveId String
  mimeType      String
  district      District @relation("DistrictToFile", fields: [districtId], references: [id])
  districtId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmailConnection {
  id        String   @id @default(cuid())
  email     String
  server    String
  port      Int
  password  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Email {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId  String   @unique
  labelId    String
  labelName  String
  subject    String
  from       String
  to         String
  body       String   @db.Text
  receivedAt DateTime
  createdAt  DateTime @default(now())
  processed  Boolean  @default(false)
} 